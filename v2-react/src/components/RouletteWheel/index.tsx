import React, { useEffect } from 'react';
import type { ClassType } from '../../types';
import ResultModal from '../ResultModal';
import { useRouletteSpin } from './useRouletteSpin';
import './RouletteWheel.css';

interface RouletteWheelProps {
  onClassSelected: (result: ClassType) => void;
}

interface Segment {
  text: ClassType;
  color: string;
}

// Segment data - updated with consistent color scheme
const segments: Segment[] = [
  { text: 'Light', color: '#4FC3F7' },  // Light blue
  { text: 'Heavy', color: '#FF1744' },  // Red
  { text: 'Light', color: '#4FC3F7' },
  { text: 'Medium', color: '#AB47BC' }, // Purple
  { text: 'Heavy', color: '#FF1744' },
  { text: 'Light', color: '#4FC3F7' },
  { text: 'Heavy', color: '#FF1744' },
  { text: 'Light', color: '#4FC3F7' },
  { text: 'Medium', color: '#AB47BC' },
  { text: 'Heavy', color: '#FF1744' },
  { text: 'Light', color: '#4FC3F7' },
  { text: 'Heavy', color: '#FF1744' }
];

/**
 * RouletteWheel component - converted from fixed_roulette.html
 * Maintains 100% identical animation behavior
 */
const RouletteWheel: React.FC<RouletteWheelProps> = ({ onClassSelected }) => {
  const {
    isSpinning,
    result,
    isProcessing,
    showModal,
    wheelRef,
    ballRef,
    generateWheel,
    spin,
    setShowModal,
    setIsProcessing
  } = useRouletteSpin(segments);


  // Auto-start spinning when component mounts
  useEffect(() => {
    generateWheel();
    const timer = setTimeout(() => {
      spin();
    }, 1000); // Auto-start after 1 second

    return () => clearTimeout(timer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Empty dependency array is intentional - only run on mount

  return (
    <>
      <div className="bg-gray-950 text-white flex flex-col items-center p-4">
        <div className="roulette-container">
          <div className="arrow"></div>
          <div className="wheel-base">
            <div className="wheel" ref={wheelRef}>
              {/* Segments will be generated by generateWheel() */}
            </div>
            <div className="outer-ring"></div>
            <div className="center-hub">
              <img 
                src="/images/the-finals.webp" 
                alt="The Finals" 
                className="w-full h-full object-contain"
              />
            </div>
          </div>
          <div className="ball-track">
            <div className="ball" ref={ballRef}></div>
          </div>
        </div>

        {/* Hide button during auto-spin since it auto-starts */}
        {!isSpinning && !isProcessing && (
          <button 
            className="px-16 py-4 rounded-full text-xl font-bold uppercase transition-all duration-300
              border-2 text-white font-family-impact mt-8
              bg-gradient-to-r from-purple-600 to-purple-700 border-yellow-400 
              hover:from-purple-500 hover:to-purple-600 hover:-translate-y-0.5 
              hover:shadow-2xl hover:shadow-purple-500/25"
            style={{
              boxShadow: '0 8px 24px rgba(171, 71, 188, 0.5), 0 0 40px rgba(171, 71, 188, 0.3), inset 0 0 20px rgba(255, 215, 0, 0.1)'
            }}
            onClick={spin}
          >
            SPIN
          </button>
        )}
      </div>

      {/* Result Modal - moved outside the min-h-screen container */}
      {showModal && result && (
        <>
          <ResultModal
            variant="class"
            value={result}
            onClose={() => {
              setShowModal(false);
              setIsProcessing(false);
              // Proceed with class selection after modal closes
              onClassSelected(result);
            }}
          />
        </>
      )}
    </>
  );
};

export default RouletteWheel;